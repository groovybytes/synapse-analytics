{
	"name": "Fetch Raw Events",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "gbsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3e535481-608d-41e5-8b3d-218de44087f8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fa500dcb-57c7-43b4-a5a6-2d4f602c6bbb/resourceGroups/rg-groovybytes-capstone/providers/Microsoft.Synapse/workspaces/groovybytes-synapse-analytics/bigDataPools/gbsparkpool",
				"name": "gbsparkpool",
				"type": "Spark",
				"endpoint": "https://groovybytes-synapse-analytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/gbsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import datetime\n",
					"from pyspark.sql.functions import to_timestamp, col, desc\n",
					"\n",
					"# Determine the two days (today and yesterday)\n",
					"today = datetime.date.today()\n",
					"yesterday = today - datetime.timedelta(days=1)\n",
					"\n",
					"# Base path for Event Hub capture files\n",
					"base_path = \"abfss://raw@groovybytesdatalake.dfs.core.windows.net/groovybytes-eventhub-namespaces/groovybytes-eventhub-data/0\"\n",
					"\n",
					"# Construct path patterns for today and yesterday\n",
					"# This pattern assumes the folder structure: /YYYY/MM/DD/HH/mm/SS.avro\n",
					"paths = [\n",
					"    f\"{base_path}/{today.year}/{today.month:02d}/{today.day:02d}/*/*/*.avro\",\n",
					"    f\"{base_path}/{yesterday.year}/{yesterday.month:02d}/{yesterday.day:02d}/*/*/*.avro\"\n",
					"]\n",
					"\n",
					"# Attempt to load Avro files from each day's path\n",
					"df_list = []\n",
					"for path in paths:\n",
					"    try:\n",
					"        df_temp = spark.read.format(\"avro\") \\\n",
					"            .option(\"ignoreExtension\", \"true\") \\\n",
					"            .load(path)\n",
					"        df_list.append(df_temp)\n",
					"    except Exception as e:\n",
					"        print(f\"Error reading path {path}: {e}\")\n",
					"\n",
					"if not df_list:\n",
					"    print(\"No files found for the past 2 days.\")\n",
					"else:\n",
					"    # Combine data from all paths\n",
					"    df_all = df_list[0]\n",
					"    for additional_df in df_list[1:]:\n",
					"        df_all = df_all.union(additional_df)\n",
					"    \n",
					"    # Convert the EnqueuedTimeUtc string to a timestamp.\n",
					"    # Adjust the format string in to_timestamp() if your data uses a custom format.\n",
					"    df_all = df_all.withColumn(\"eventTimestamp\", to_timestamp(col(\"EnqueuedTimeUtc\")))\n",
					"    \n",
					"    # Order by eventTimestamp descending and retrieve the latest event\n",
					"    latest_event = df_all.orderBy(col(\"eventTimestamp\").desc()).limit(1)\n",
					"    \n",
					"    latest_event.show(truncate=False)\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"import datetime\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import col, udf, from_json, to_timestamp, desc\n",
					"from pyspark.sql.types import StringType, StructType, StructField, DoubleType\n",
					"\n",
					"# Create or get the Spark session\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"# Example file path based on your folder structure\n",
					"file_path = \"abfss://raw@groovybytesdatalake.dfs.core.windows.net/groovybytes-eventhub-namespaces/groovybytes-eventhub-data/0/2025/02/20/06/34/32.avro\"\n",
					"\n",
					"# Read the Avro file, ignoring the file extension if needed\n",
					"df = spark.read.format(\"avro\") \\\n",
					"    .option(\"ignoreExtension\", \"true\") \\\n",
					"    .load(file_path)\n",
					"\n",
					"df.printSchema()\n",
					"\n",
					"# UDF to decode the binary 'Body' field into a UTF-8 string\n",
					"def decode_bytes(binary):\n",
					"    return binary.decode(\"utf-8\") if binary is not None else None\n",
					"\n",
					"decode_udf = udf(decode_bytes, StringType())\n",
					"df = df.withColumn(\"BodyStr\", decode_udf(col(\"Body\")))\n",
					"\n",
					"# Define a JSON schema for the expected payload (e.g., temperature and humidity)\n",
					"body_schema = StructType([\n",
					"    StructField(\"temperature\", DoubleType(), True),\n",
					"    StructField(\"humidity\", DoubleType(), True)\n",
					"])\n",
					"\n",
					"# Parse the JSON from BodyStr; if it fails the result is null.\n",
					"df = df.withColumn(\"parsed\", from_json(col(\"BodyStr\"), body_schema))\n",
					"df = df.filter(col(\"parsed\").isNotNull())\n",
					"\n",
					"# Extract sensor readings as individual columns\n",
					"df = df.withColumn(\"temperature\", col(\"parsed.temperature\")) \\\n",
					"       .withColumn(\"humidity\", col(\"parsed.humidity\"))\n",
					"\n",
					"# Convert EnqueuedTimeUtc to a timestamp.\n",
					"# Adjust the format if your timestamp string is different.\n",
					"df = df.withColumn(\"eventTimestamp\", to_timestamp(col(\"EnqueuedTimeUtc\"), \"M/d/yyyy h:mm:ss a\"))\n",
					"\n",
					"# UDF to extract the device ID from SystemProperties.\n",
					"# In your sample, \"iothub-connection-device-id\" maps to a list like [null, null, tempDevice, null].\n",
					"def extract_device_id(sys_props):\n",
					"    try:\n",
					"        # sys_props is a dict; extract the value for \"iothub-connection-device-id\"\n",
					"        val = sys_props.get(\"iothub-connection-device-id\")\n",
					"        # If the value is a list and has at least three elements, return the third element.\n",
					"        if isinstance(val, list) and len(val) > 2:\n",
					"            return val[2]\n",
					"        else:\n",
					"            return None\n",
					"    except Exception as e:\n",
					"        return None\n",
					"\n",
					"extract_device_id_udf = udf(extract_device_id, StringType())\n",
					"df = df.withColumn(\"deviceId\", extract_device_id_udf(col(\"SystemProperties\")))\n",
					"\n",
					"# Select and display useful fields, ordering by the event timestamp descending.\n",
					"df.select(\n",
					"    \"SequenceNumber\",\n",
					"    \"deviceId\",\n",
					"    \"eventTimestamp\",\n",
					"    \"temperature\",\n",
					"    \"humidity\"\n",
					").orderBy(desc(\"eventTimestamp\")).show(truncate=False)\n",
					""
				],
				"execution_count": 3
			}
		]
	}
}